#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <MQUnifiedsensor.h>
#include <base64.h>

// กำหนดพอร์ตที่เชื่อมต่อกับเซนเซอร์
#define Board "ESP-32"
#define Type "MQ-2"
#define Voltage_Resolution 3.3
#define ADC_Bit_Resolution 12
#define Pin 34  // พอร์ต ADC ที่ใช้เชื่อมต่อกับ A0 ของ MQ2
#define RatioMQ2CleanAir 9.83

// ใส่ข้อมูล WiFi ของคุณ
const char* ssid = "Alitz";
const char* password = "00240151";

// ข้อมูลของ Twilio API
const char* twilioAccountSid = "ACe5172b4416a2e3cda95e0b926c7d8448";
const char* twilioAuthToken = "982ba55eb182598b209942a9f1b74f5e";
const char* twilioNumber = "+19187791048";
const char* toNumber = "+66923745900";
const char* twimlUrl = "https://handler.twilio.com/twiml/EH83cbd41c7e8f181b321c05f5c4f616a6";
// สร้างออบเจ็กต์เซนเซอร์
MQUnifiedsensor MQ2(Board, Voltage_Resolution, ADC_Bit_Resolution, Pin, Type);

MQUnifiedsensor MQ2(Board, Voltage_Resolution, ADC_Bit_Resolution, Pin, Type);

// กำหนดพอร์ตที่เชื่อมต่อกับโมเด็ม A7670E
SoftwareSerial modemSerial(16, 17); // RX, TX

void setup() {
  SerialMon.begin(UART_BAUD);
    delay(10);

    SerialMon.println("setup...");

    pinMode(BAT_EN, OUTPUT);
    digitalWrite(BAT_EN, HIGH);

    //A7670 Reset
    pinMode(RESET, OUTPUT);
    digitalWrite(RESET, LOW);
    delay(100);
    digitalWrite(RESET, HIGH);
    delay(3000);
    digitalWrite(RESET, LOW);

    pinMode(PWR_PIN, OUTPUT);
    digitalWrite(PWR_PIN, LOW);
    delay(100);
    digitalWrite(PWR_PIN, HIGH);
    delay(1000);
    digitalWrite(PWR_PIN, LOW);

    delay(1000);

    SerialAT.begin(UART_BAUD, SERIAL_8N1, PIN_RX, PIN_TX);

    // Restart takes quite some time
    // To skip it, call init() instead of restart()
    SerialMon.println("Initializing modem...");
    if (!modem.init()) {
        SerialMon.println("Failed to restart modem, attempting to continue without restarting");
    }

  Serial.begin(115200);
  modemSerial.begin(9600);

  MQ2.setRegressionMethod(1); // กำหนดสมการแบบ exponential
  MQ2.setA(605.18); // ค่า A จากกราฟของ datasheet
  MQ2.setB(-3.937); // ค่า B จากกราฟของ datasheet

  MQ2.init(); // เริ่มต้นการทำงานของเซนเซอร์

  Serial.print("Calibrating... ");
  float calcR0 = 0;
  for(int i = 1; i <= 10; i++) {
    MQ2.update();
    calcR0 += MQ2.calibrate(RatioMQ2CleanAir);
    Serial.print(".");
  }
  MQ2.setR0(calcR0 / 10);
  Serial.println(" done!");

  if(isinf(calcR0)) {
    Serial.println("Warning: Connection issue, R0 is infinite (Open circuit detected) please check your wiring and supply");
    while(1);
  }
  if(calcR0 == 0) {
    Serial.println("Warning: Connection issue, R0 is zero (Analog pin with short circuit to ground) please check your wiring and supply");
    while(1);
  }

  MQ2.serialDebug(true);

  // ทดสอบการเชื่อมต่อกับโมเด็ม
  modemSerial.println("AT");
  delay(1000);
  while (modemSerial.available()) {
    Serial.write(modemSerial.read());
  }

  // ตั้งค่าโมเด็ม A7670E
  modemSerial.println("AT+CLIP=1");  // เปิดใช้งานการแสดง Caller ID
  delay(1000);
  while (modemSerial.available()) {
    Serial.write(modemSerial.read());
  }
}

void loop() {
  MQ2.update();
  float smokePPM = MQ2.readSensor();
  Serial.print("Smoke: ");
  Serial.print(smokePPM);
  Serial.println(" ppm");

  if (smokePPM > 100) {
    Serial.println("Smoke level is high! Making a call...");
    makeCall();
  }

  delay(1000);
}

void makeCall() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    
    String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(twilioAccountSid) + "/Calls.json";
    
    http.begin(url);
    
    String auth = base64::encode(String(twilioAccountSid) + ":" + String(twilioAuthToken));
    http.addHeader("Authorization", "Basic " + auth);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");
    
    String postData = "To=" + urlEncode(toNumber) + "&From=" + urlEncode(twilioNumber) + "&Url=" + urlEncode(twimlUrl);
    
    int httpResponseCode = http.POST(postData);
    
    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("การโทรสำเร็จ: " + response);
    } else {
      Serial.println("การโทรล้มเหลว. รหัสข้อผิดพลาด: " + String(httpResponseCode));
    }
    
    http.end();
  } else {
    Serial.println("ไม่สามารถเชื่อมต่อ WiFi ได้");
  }
}

String urlEncode(String str) {
  String encodedString = "";
  char c;
  char code0;
  char code1;
  for (int i = 0; i < str.length(); i++) {
    c = str.charAt(i);
    if (c == ' ') {
      encodedString += '+';
    } else if (isalnum(c)) {
      encodedString += c;
    } else {
      code1 = (c & 0xf) + '0';
      if ((c & 0xf) > 9) {
        code1 = (c & 0xf) - 10 + 'A';
      }
      c = (c >> 4) & 0xf;
      code0 = c + '0';
      if (c > 9) {
        code0 = c - 10 + 'A';
      }
      encodedString += '%';
      encodedString += code0;
      encodedString += code1;
    }
  }
  return encodedString;
}
