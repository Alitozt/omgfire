#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <MQUnifiedsensor.h>
#include <base64.h>

#define Board "ESP-32"
#define Type "MQ-2"
#define Voltage_Resolution 3.3
#define ADC_Bit_Resolution 12
#define Pin 34  // พอร์ต ADC ที่ใช้เชื่อมต่อกับ A0 ของ MQ2
#define RatioMQ2CleanAir 9.83

const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

const char* twilioAccountSid = "YOUR_TWILIO_SID";
const char* twilioAuthToken = "YOUR_TWILIO_AUTH-TOKEN";
const char* twilioNumber = "YOUR_TWILIO_NUMBER";
const char* toNumber = "NUMBER_THAT_YOU_NEED_TO_CALL";
const char* twimlUrl = "YOUR_TWIML_URL";

MQUnifiedsensor MQ2(Board, Voltage_Resolution, ADC_Bit_Resolution, Pin, Type);

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");

  MQ2.setRegressionMethod(1); // กำหนดสมการแบบ exponential
  MQ2.setA(605.18); // ค่า A จากกราฟของ datasheet
  MQ2.setB(-3.937); // ค่า B จากกราฟของ datasheet

  MQ2.init();

  Serial.print("Calibrating... ");
  float calcR0 = 0;
  for(int i = 1; i <= 10; i++) {
    MQ2.update();
    calcR0 += MQ2.calibrate(RatioMQ2CleanAir);
    Serial.print(".");
  }
  MQ2.setR0(calcR0 / 10);
  Serial.println(" done!");

  if(isinf(calcR0)) {
    Serial.println("Warning: Connection issue, R0 is infinite (Open circuit detected) please check your wiring and supply");
    while(1);
  }
  if(calcR0 == 0) {
    Serial.println("Warning: Connection issue, R0 is zero (Analog pin with short circuit to ground) please check your wiring and supply");
    while(1);
  }

  MQ2.serialDebug(true);
}

void loop() {
  MQ2.update();
  float smokePPM = MQ2.readSensor();
  Serial.print("Smoke: ");
  Serial.print(smokePPM);
  Serial.println(" ppm");

  if (smokePPM > 100) {
    Serial.println("Smoke level is high! Making a call...");
    makeCall();
  }

  delay(1000);
}

void makeCall() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    
    String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(twilioAccountSid) + "/Calls.json";
    
    http.begin(url);
    
    String auth = base64::encode(String(twilioAccountSid) + ":" + String(twilioAuthToken));
    http.addHeader("Authorization", "Basic " + auth);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");
    
    String postData = "To=" + urlEncode(toNumber) + "&From=" + urlEncode(twilioNumber) + "&Url=" + urlEncode(twimlUrl);
    
    int httpResponseCode = http.POST(postData);
    
    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Call Success : " + response);
    } else {
      Serial.println("Call Fail. Error Code: " + String(httpResponseCode));
    }
    
    http.end();
  } else {
    Serial.println("Can’t connect to WIFI");
  }
}

String urlEncode(String str) {
  String encodedString = "";
  char c;
  char code0;
  char code1;
  for (int i = 0; i < str.length(); i++) {
    c = str.charAt(i);
    if (c == ' ') {
      encodedString += '+';
    } else if (isalnum(c)) {
      encodedString += c;
    } else {
      code1 = (c & 0xf) + '0';
      if ((c & 0xf) > 9) {
        code1 = (c & 0xf) - 10 + 'A';
      }
      c = (c >> 4) & 0xf;
      code0 = c + '0';
      if (c > 9) {
        code0 = c - 10 + 'A';
      }
      encodedString += '%';
      encodedString += code0;
      encodedString += code1;
    }
  }
  return encodedString;
}
