//By N.Alitz Co.ChatGPT
#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <MQUnifiedsensor.h>
#include <base64.h>

#define Board "ESP-32"
#define Type "MQ-2"
#define Voltage_Resolution 3.3
#define ADC_Bit_Resolution 12
#define Pin 34
#define RatioMQ2CleanAir 9.83

const char* twilioAccountSid = "AC03f1b0ca4aaa021ef3167ef359aad4b4";
const char* twilioAuthToken = "f3116cdab982c5addaffa204632550e0";
const char* twilioNumber = "+16508440246";
const char* toNumber = "+66923745900";
const char* twimlUrl = "https://handler.twilio.com/twiml/EH83cbd41c7e8f181b321c05f5c4f616a6";

const char DEVICE_LOGIN_NAME[] = "30d69e95-eea5-4da4-ad59-a9c1d7b2bf86";
const char SSID[] = "Alitz";
const char PASS[] = "24015100";
const char DEVICE_KEY[] = "r7enXrNFEpmuxQROByr!y4Gwb";

float smoke;

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);

MQUnifiedsensor MQ2(Board, Voltage_Resolution, ADC_Bit_Resolution, Pin, Type);

void setup() {
  Serial.begin(115200);
  WiFi.begin(SSID, PASS);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");

  MQ2.setRegressionMethod(1);
  MQ2.setA(605.18); 
  MQ2.setB(-3.937); 

  MQ2.init();

  Serial.print("Calibrating... ");
  float calcR0 = 0;
  for(int i = 1; i <= 10; i++) {
    MQ2.update();
    calcR0 += MQ2.calibrate(RatioMQ2CleanAir);
    Serial.print(".");
  }
  MQ2.setR0(calcR0 / 10);
  Serial.println(" done!");

  if(isinf(calcR0)) {
    Serial.println("Warning: Connection issue, R0 is infinite (Open circuit detected) please check your wiring and supply");
    while(1);
  }
  if(calcR0 == 0) {
    Serial.println("Warning: Connection issue, R0 is zero (Analog pin with short circuit to ground) please check your wiring and supply");
    while(1);
  }

  MQ2.serialDebug(true);

  initProperties();

  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  ReadSmoke();
  MQ2.update();
  float smokePPM = MQ2.readSensor();
  Serial.print("Smoke: ");
  Serial.print(smokePPM);
  Serial.println(" ppm");


  if (smokePPM > 200) {
    Serial.println("Smoke level is high! Making a call...");
    makeCall();
  }

  delay(1000);
}

void makeCall() {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClientSecure client;
    client.setInsecure(); // Disable certificate verification

    HttpClient http(client, "api.twilio.com", 443);
    
    String auth = base64::encode(String(twilioAccountSid) + ":" + String(twilioAuthToken));
    String postData = "To=" + urlEncode(String(toNumber)) + "&From=" + urlEncode(String(twilioNumber)) + "&Url=" + urlEncode(String(twimlUrl));
    
    String path = "/2010-04-01/Accounts/" + String(twilioAccountSid) + "/Calls.json";

    Serial.println("Making API call to Twilio...");
    Serial.println("Path: " + path);
    Serial.println("Auth (first 10 chars): " + auth.substring(0, 10) + "...");
    Serial.println("PostData: " + postData);

    http.beginRequest();
    int err = http.post(path);
    if (err != 0) {
      Serial.println("connect error: " + String(err));
      return;
    }

    http.sendHeader("Authorization", "Basic " + auth);
    http.sendHeader("Content-Type", "application/x-www-form-urlencoded");
    http.sendHeader("Content-Length", String(postData.length()));
    http.beginBody();
    http.print(postData);

    int statusCode = http.responseStatusCode();
    String response = http.responseBody();

    Serial.print("Status code: ");
    Serial.println(statusCode);
    Serial.print("Response: ");
    Serial.println(response);

    if (statusCode == 201) {
      Serial.println("Call Success!");
    } else {
      Serial.println("Call Failed. Error Code: " + String(statusCode));
      Serial.println("Error message: " + response);
    }
  } else {
    Serial.println("Can't connect to WiFi");
  }
}

String urlEncode(String str) {
  String encodedString = "";
  char c;
  char code0;
  char code1;
  for (int i = 0; i < str.length(); i++) {
    c = str.charAt(i);
    if (c == ' ') {
      encodedString += '+';
    } else if (isalnum(c)) {
      encodedString += c;
    } else {
      code1 = (c & 0xf) + '0';
      if ((c & 0xf) > 9) {
        code1 = (c & 0xf) - 10 + 'A';
      }
      c = (c >> 4) & 0xf;
      code0 = c + '0';
      if (c > 9) {
        code0 = c - 10 + 'A';
      }
      encodedString += '%';
      encodedString += code0;
      encodedString += code1;
    }
  }
  return encodedString;
}

void initProperties() {
  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(smoke, READ, ON_CHANGE, NULL);
}

void ReadSmoke() {
  smoke = MQ2.readSensor();
}

