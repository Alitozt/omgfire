

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <MQUnifiedsensor.h>
#include <base64.h>
#include <WiFiClient.h>
#include <HttpClient.h>
///////////////////////////////////////Thing
#define Board "ESP-32"
#define Type "MQ-2"
#define Voltage_Resolution 3.3
#define ADC_Bit_Resolution 12
#define Pin 4
#define RatioMQ2CleanAir 9.83

MQUnifiedsensor MQ2(Board, Voltage_Resolution, ADC_Bit_Resolution, Pin, Type);
///////////////////////////////////////Thing

const char DEVICE_LOGIN_NAME[] = "YOUR_DEVICE_LOGIN_NAME";
const char SSID[] = "YOUR_WIFI_NAME";    // Network SSID (name)
const char PASS[] = "YOUR_WIFI_PASS"; // Network password (use for WPA, or use as key for WEP)
const char DEVICE_KEY[] = "YOUR_DEVICE_KEY"; // Secret device password

const char* twilioAccountSid[] = "YOUR_TWILIO_SID";
const char* twilioAuthToken[] = "YOUR_TWILIO_AUTH-TOKEN";
const char* twilioNumber[] = "YOUR_TWILIO_NUMBER";
const char* toNumber[] = "NUMBER_THAT_YOU_NEED_TO_CALL";
const char* twimlUrl[] = "YOUR_TWIML_URL";

float smoke;

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);

void setup() {
  Serial.begin(115200);
  delay(1500);

  WiFi.begin(SSID, PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  MQ2.setRegressionMethod(1);
  MQ2.setA(605.18); 
  MQ2.setB(-3.937); 
  MQ2.init();

  Serial.print("Calibrating... ");
  float calcR0 = 0;
  for(int i = 1; i <= 10; i++) {
    MQ2.update();
    calcR0 += MQ2.calibrate(RatioMQ2CleanAir);
    Serial.print(".");
  }
  MQ2.setR0(calcR0 / 10);
  Serial.println(" done!");

  MQ2.serialDebug(true);

  initProperties();

  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  ReadSmoke();
}

void ReadSmoke() {
  MQ2.update();
  smoke = MQ2.readSensor();
  Serial.print("Smoke: ");
  Serial.println(smoke);
  if (smoke > 100) {
    Serial.println("Smoke level is high! Making a call...");
    makeCall();
  }
  delay(1000);
}

void makeCall() {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient wifi;
    HttpClient http = HttpClient(wifi, "api.twilio.com", 443); // Use HttpClient class instead
    
    String url = "/2010-04-01/Accounts/" + String(twilioAccountSid) + "/Calls.json";
    String auth = base64::encode(String(twilioAccountSid) + ":" + String(twilioAuthToken));
    http.beginRequest();
    http.post(url);
    http.sendHeader("Authorization", "Basic " + auth);
    http.sendHeader("Content-Type", "application/x-www-form-urlencoded");
    String postData = "To=" + urlEncode(toNumber) + "&From=" + urlEncode(twilioNumber) + "&Url=" + urlEncode(twimlUrl);
    http.sendHeader("Content-Length", postData.length());
    http.endRequest();
    http.print(postData);

    int statusCode = http.responseStatusCode();
    String response = http.responseBody();

    if (statusCode > 0) {
      Serial.println("Call Success: " + response);
    } else {
      Serial.println("Call Failed. Error Code: " + String(statusCode));
    }
  } else {
    Serial.println("Canâ€™t connect to WIFI");
  }
}



String urlEncode(String str) {
  String encodedString = "";
  char c;
  char code0;
  char code1;
  for (int i = 0; i < str.length(); i++) {
    c = str.charAt(i);
    if (c == ' ') {
      encodedString += '+';
    } else if (isalnum(c)) {
      encodedString += c;
    } else {
      code1 = (c & 0xf) + '0';
      if ((c & 0xf) > 9) {
        code1 = (c & 0xf) - 10 + 'A';
      }
      c = (c >> 4) & 0xf;
      code0 = c + '0';
      if (c > 9) {
        code0 = c - 10 + 'A';
      }
      encodedString += '%';
      encodedString += code0;
      encodedString += code1;
    }
  }
  return encodedString;
}

void initProperties() {
  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(smoke, READ, ON_CHANGE, NULL);
}
